name: Kaisa
on:
  push:
    branches: ['*']
  pull_request:
  workflow_dispatch:
  release:
    types: [published]
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        configuration: ['Debug', 'Release']
    name: Build and Test ${{matrix.configuration}}
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      # ----------------------------------------------------------------------- Set build version
      - name: Set Build Version
        run: python .github/workflows/set-ci-build-version.py
        env:
          release_tag_name: ${{github.event.release.tag_name}}
          github_run_number: ${{github.run_number}}

      # ----------------------------------------------------------------------- Build
      - name: Restore
        run: dotnet restore

      - name: Build
        id: build
        run: dotnet build --no-restore --configuration ${{matrix.configuration}}

      # ----------------------------------------------------------------------- Pack NuGet Package
      - name: Pack
        id: pack
        run: dotnet pack --no-restore --no-build --configuration ${{matrix.configuration}}

      # ----------------------------------------------------------------------- Collect Artifacts
      - name: Collect Build Outputs
        if: steps.build.outcome == 'success' && always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.configuration}}BuildOutputs
          path: |
            **/bin/**
            **/obj/**

      - name: Collect NuGet Packages
        if: steps.pack.outcome == 'success' && always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.configuration}}Packages
          path: packages/**

  publish:
    name: Publish Packages
    if: github.event_name == 'release'
    needs: build
    environment: NuGet.org
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # ----------------------------------------------------------------------- Download Built Packages
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: ReleasePackages

      # ----------------------------------------------------------------------- Attach Package to Release
      - name: Attach NuGet Package to GitHub Release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          user-agent: actions/github-script for ${{github.repository}}
          script: |
            const fs = require('fs').promises;
            const path = require('path');

            for (let filePath of await fs.readdir('.')) {
              const fileExtension = path.extname(filePath);
              if (fileExtension != '.nupkg' && fileExtension != '.snupkg') {
                continue;
              }

              console.log(`Uploading '${filePath}'`);
              const contentLength = (await fs.stat(filePath)).size;
              const fileContents = await fs.readFile(filePath);
              await github.repos.uploadReleaseAsset({
                url: '${{github.event.release.upload_url}}',
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': contentLength
                },
                name: path.basename(filePath),
                data: fileContents
              });
            }

      # ----------------------------------------------------------------------- Publish Package to NuGet.org
      - name: Push to NuGet.org
        run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source ${{secrets.NUGET_API_URL}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

      # ----------------------------------------------------------------------- Publish Package to GitHub Package Repository
      - name: Push to GitHub Packages
        run: dotnet nuget push "*.nupkg"  --no-symbols true --api-key ${{secrets.GITHUB_TOKEN}} --source https://nuget.pkg.github.com/${{github.repository_owner}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  send-ci-failure-notification:
    name: Send CI Failure Notification
    needs: [build, publish]
    if: failure() && github.event_name != 'pull_request'
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      # ----------------------------------------------------------------------- Send CI Failure Notification
      - name: Send Notification
        run: python .github/workflows/send-ci-failure-notification.py
        env:
          webhook_url: ${{secrets.TEAMS_WEBHOOK_URL}}
          github_organization: ${{github.repository_owner}}
          github_repo: ${{github.repository}}
          github_workflow_name: ${{github.workflow}}
          github_run_number: ${{github.run_id}}
